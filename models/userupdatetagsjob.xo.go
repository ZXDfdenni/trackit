// Package models contains the types for schema 'trackit'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// UserUpdateTagsJob represents a row from 'trackit.user_update_tags_job'.
type UserUpdateTagsJob struct {
	ID        int       `json:"id"`        // id
	Created   time.Time `json:"created"`   // created
	UserID    int       `json:"user_id"`   // user_id
	Completed time.Time `json:"completed"` // completed
	WorkerID  string    `json:"worker_id"` // worker_id
	JobError  string    `json:"job_error"` // job_error

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UserUpdateTagsJob exists in the database.
func (uutj *UserUpdateTagsJob) Exists() bool {
	return uutj._exists
}

// Deleted provides information if the UserUpdateTagsJob has been deleted from the database.
func (uutj *UserUpdateTagsJob) Deleted() bool {
	return uutj._deleted
}

// Insert inserts the UserUpdateTagsJob to the database.
func (uutj *UserUpdateTagsJob) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if uutj._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO trackit.user_update_tags_job (` +
		`created, user_id, completed, worker_id, job_error` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, uutj.Created, uutj.UserID, uutj.Completed, uutj.WorkerID, uutj.JobError)
	res, err := db.Exec(sqlstr, uutj.Created, uutj.UserID, uutj.Completed, uutj.WorkerID, uutj.JobError)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	uutj.ID = int(id)
	uutj._exists = true

	return nil
}

// Update updates the UserUpdateTagsJob in the database.
func (uutj *UserUpdateTagsJob) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !uutj._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if uutj._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE trackit.user_update_tags_job SET ` +
		`created = ?, user_id = ?, completed = ?, worker_id = ?, job_error = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, uutj.Created, uutj.UserID, uutj.Completed, uutj.WorkerID, uutj.JobError, uutj.ID)
	_, err = db.Exec(sqlstr, uutj.Created, uutj.UserID, uutj.Completed, uutj.WorkerID, uutj.JobError, uutj.ID)
	return err
}

// Save saves the UserUpdateTagsJob to the database.
func (uutj *UserUpdateTagsJob) Save(db XODB) error {
	if uutj.Exists() {
		return uutj.Update(db)
	}

	return uutj.Insert(db)
}

// Delete deletes the UserUpdateTagsJob from the database.
func (uutj *UserUpdateTagsJob) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !uutj._exists {
		return nil
	}

	// if deleted, bail
	if uutj._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM trackit.user_update_tags_job WHERE id = ?`

	// run query
	XOLog(sqlstr, uutj.ID)
	_, err = db.Exec(sqlstr, uutj.ID)
	if err != nil {
		return err
	}

	// set deleted
	uutj._deleted = true

	return nil
}

// User returns the User associated with the UserUpdateTagsJob's UserID (user_id).
//
// Generated from foreign key 'user_update_tags_job_ibfk_1'.
func (uutj *UserUpdateTagsJob) User(db XODB) (*User, error) {
	return UserByID(db, uutj.UserID)
}

// UserUpdateTagsJobsByUserID retrieves a row from 'trackit.user_update_tags_job' as a UserUpdateTagsJob.
//
// Generated from index 'foreign_user'.
func UserUpdateTagsJobsByUserID(db XODB, userID int) ([]*UserUpdateTagsJob, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, created, user_id, completed, worker_id, job_error ` +
		`FROM trackit.user_update_tags_job ` +
		`WHERE user_id = ?`

	// run query
	XOLog(sqlstr, userID)
	q, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*UserUpdateTagsJob{}
	for q.Next() {
		uutj := UserUpdateTagsJob{
			_exists: true,
		}

		// scan
		err = q.Scan(&uutj.ID, &uutj.Created, &uutj.UserID, &uutj.Completed, &uutj.WorkerID, &uutj.JobError)
		if err != nil {
			return nil, err
		}

		res = append(res, &uutj)
	}

	return res, nil
}

// UserUpdateTagsJobByID retrieves a row from 'trackit.user_update_tags_job' as a UserUpdateTagsJob.
//
// Generated from index 'user_update_tags_job_id_pkey'.
func UserUpdateTagsJobByID(db XODB, id int) (*UserUpdateTagsJob, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, created, user_id, completed, worker_id, job_error ` +
		`FROM trackit.user_update_tags_job ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	uutj := UserUpdateTagsJob{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&uutj.ID, &uutj.Created, &uutj.UserID, &uutj.Completed, &uutj.WorkerID, &uutj.JobError)
	if err != nil {
		return nil, err
	}

	return &uutj, nil
}
