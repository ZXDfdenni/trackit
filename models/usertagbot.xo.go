// Package models contains the types for schema 'trackit'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// UserTagbot represents a row from 'trackit.user_tagbot'.
type UserTagbot struct {
	ID                        int    `json:"id"`                          // id
	UserID                    int    `json:"user_id"`                     // user_id
	AwsCustomerIdentifier     string `json:"aws_customer_identifier"`     // aws_customer_identifier
	AwsCustomerEntitlement    bool   `json:"aws_customer_entitlement"`    // aws_customer_entitlement
	StripeCustomerIdentifier  string `json:"stripe_customer_identifier"`  // stripe_customer_identifier
	StripeCustomerEntitlement bool   `json:"stripe_customer_entitlement"` // stripe_customer_entitlement

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UserTagbot exists in the database.
func (ut *UserTagbot) Exists() bool {
	return ut._exists
}

// Deleted provides information if the UserTagbot has been deleted from the database.
func (ut *UserTagbot) Deleted() bool {
	return ut._deleted
}

// Insert inserts the UserTagbot to the database.
func (ut *UserTagbot) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ut._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO trackit.user_tagbot (` +
		`user_id, aws_customer_identifier, aws_customer_entitlement, stripe_customer_identifier, stripe_customer_entitlement` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ut.UserID, ut.AwsCustomerIdentifier, ut.AwsCustomerEntitlement, ut.StripeCustomerIdentifier, ut.StripeCustomerEntitlement)
	res, err := db.Exec(sqlstr, ut.UserID, ut.AwsCustomerIdentifier, ut.AwsCustomerEntitlement, ut.StripeCustomerIdentifier, ut.StripeCustomerEntitlement)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ut.ID = int(id)
	ut._exists = true

	return nil
}

// Update updates the UserTagbot in the database.
func (ut *UserTagbot) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ut._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ut._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE trackit.user_tagbot SET ` +
		`user_id = ?, aws_customer_identifier = ?, aws_customer_entitlement = ?, stripe_customer_identifier = ?, stripe_customer_entitlement = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ut.UserID, ut.AwsCustomerIdentifier, ut.AwsCustomerEntitlement, ut.StripeCustomerIdentifier, ut.StripeCustomerEntitlement, ut.ID)
	_, err = db.Exec(sqlstr, ut.UserID, ut.AwsCustomerIdentifier, ut.AwsCustomerEntitlement, ut.StripeCustomerIdentifier, ut.StripeCustomerEntitlement, ut.ID)
	return err
}

// Save saves the UserTagbot to the database.
func (ut *UserTagbot) Save(db XODB) error {
	if ut.Exists() {
		return ut.Update(db)
	}

	return ut.Insert(db)
}

// Delete deletes the UserTagbot from the database.
func (ut *UserTagbot) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ut._exists {
		return nil
	}

	// if deleted, bail
	if ut._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM trackit.user_tagbot WHERE id = ?`

	// run query
	XOLog(sqlstr, ut.ID)
	_, err = db.Exec(sqlstr, ut.ID)
	if err != nil {
		return err
	}

	// set deleted
	ut._deleted = true

	return nil
}

// User returns the User associated with the UserTagbot's UserID (user_id).
//
// Generated from foreign key 'user_tagbot_ibfk_1'.
func (ut *UserTagbot) User(db XODB) (*User, error) {
	return UserByID(db, ut.UserID)
}

// UserTagbotsByUserID retrieves a row from 'trackit.user_tagbot' as a UserTagbot.
//
// Generated from index 'foreign_user'.
func UserTagbotsByUserID(db XODB, userID int) ([]*UserTagbot, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, aws_customer_identifier, aws_customer_entitlement, stripe_customer_identifier, stripe_customer_entitlement ` +
		`FROM trackit.user_tagbot ` +
		`WHERE user_id = ?`

	// run query
	XOLog(sqlstr, userID)
	q, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*UserTagbot{}
	for q.Next() {
		ut := UserTagbot{
			_exists: true,
		}

		// scan
		err = q.Scan(&ut.ID, &ut.UserID, &ut.AwsCustomerIdentifier, &ut.AwsCustomerEntitlement, &ut.StripeCustomerIdentifier, &ut.StripeCustomerEntitlement)
		if err != nil {
			return nil, err
		}

		res = append(res, &ut)
	}

	return res, nil
}

// UserTagbotByID retrieves a row from 'trackit.user_tagbot' as a UserTagbot.
//
// Generated from index 'user_tagbot_id_pkey'.
func UserTagbotByID(db XODB, id int) (*UserTagbot, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, aws_customer_identifier, aws_customer_entitlement, stripe_customer_identifier, stripe_customer_entitlement ` +
		`FROM trackit.user_tagbot ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ut := UserTagbot{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ut.ID, &ut.UserID, &ut.AwsCustomerIdentifier, &ut.AwsCustomerEntitlement, &ut.StripeCustomerIdentifier, &ut.StripeCustomerEntitlement)
	if err != nil {
		return nil, err
	}

	return &ut, nil
}
