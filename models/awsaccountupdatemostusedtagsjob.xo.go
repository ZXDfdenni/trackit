// Package models contains the types for schema 'trackit'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// AwsAccountUpdateMostUsedTagsJob represents a row from 'trackit.aws_account_update_most_used_tags_job'.
type AwsAccountUpdateMostUsedTagsJob struct {
	ID           int       `json:"id"`             // id
	Created      time.Time `json:"created"`        // created
	AwsAccountID int       `json:"aws_account_id"` // aws_account_id
	Completed    time.Time `json:"completed"`      // completed
	WorkerID     string    `json:"worker_id"`      // worker_id
	JobError     string    `json:"job_error"`      // job_error

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AwsAccountUpdateMostUsedTagsJob exists in the database.
func (aaumutj *AwsAccountUpdateMostUsedTagsJob) Exists() bool {
	return aaumutj._exists
}

// Deleted provides information if the AwsAccountUpdateMostUsedTagsJob has been deleted from the database.
func (aaumutj *AwsAccountUpdateMostUsedTagsJob) Deleted() bool {
	return aaumutj._deleted
}

// Insert inserts the AwsAccountUpdateMostUsedTagsJob to the database.
func (aaumutj *AwsAccountUpdateMostUsedTagsJob) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if aaumutj._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO trackit.aws_account_update_most_used_tags_job (` +
		`created, aws_account_id, completed, worker_id, job_error` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, aaumutj.Created, aaumutj.AwsAccountID, aaumutj.Completed, aaumutj.WorkerID, aaumutj.JobError)
	res, err := db.Exec(sqlstr, aaumutj.Created, aaumutj.AwsAccountID, aaumutj.Completed, aaumutj.WorkerID, aaumutj.JobError)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	aaumutj.ID = int(id)
	aaumutj._exists = true

	return nil
}

// Update updates the AwsAccountUpdateMostUsedTagsJob in the database.
func (aaumutj *AwsAccountUpdateMostUsedTagsJob) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !aaumutj._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if aaumutj._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE trackit.aws_account_update_most_used_tags_job SET ` +
		`created = ?, aws_account_id = ?, completed = ?, worker_id = ?, job_error = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, aaumutj.Created, aaumutj.AwsAccountID, aaumutj.Completed, aaumutj.WorkerID, aaumutj.JobError, aaumutj.ID)
	_, err = db.Exec(sqlstr, aaumutj.Created, aaumutj.AwsAccountID, aaumutj.Completed, aaumutj.WorkerID, aaumutj.JobError, aaumutj.ID)
	return err
}

// Save saves the AwsAccountUpdateMostUsedTagsJob to the database.
func (aaumutj *AwsAccountUpdateMostUsedTagsJob) Save(db XODB) error {
	if aaumutj.Exists() {
		return aaumutj.Update(db)
	}

	return aaumutj.Insert(db)
}

// Delete deletes the AwsAccountUpdateMostUsedTagsJob from the database.
func (aaumutj *AwsAccountUpdateMostUsedTagsJob) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !aaumutj._exists {
		return nil
	}

	// if deleted, bail
	if aaumutj._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM trackit.aws_account_update_most_used_tags_job WHERE id = ?`

	// run query
	XOLog(sqlstr, aaumutj.ID)
	_, err = db.Exec(sqlstr, aaumutj.ID)
	if err != nil {
		return err
	}

	// set deleted
	aaumutj._deleted = true

	return nil
}

// AwsAccount returns the AwsAccount associated with the AwsAccountUpdateMostUsedTagsJob's AwsAccountID (aws_account_id).
//
// Generated from foreign key 'aws_account_update_most_used_tags_job_ibfk_1'.
func (aaumutj *AwsAccountUpdateMostUsedTagsJob) AwsAccount(db XODB) (*AwsAccount, error) {
	return AwsAccountByID(db, aaumutj.AwsAccountID)
}

// AwsAccountUpdateMostUsedTagsJobByID retrieves a row from 'trackit.aws_account_update_most_used_tags_job' as a AwsAccountUpdateMostUsedTagsJob.
//
// Generated from index 'aws_account_update_most_used_tags_job_id_pkey'.
func AwsAccountUpdateMostUsedTagsJobByID(db XODB, id int) (*AwsAccountUpdateMostUsedTagsJob, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, created, aws_account_id, completed, worker_id, job_error ` +
		`FROM trackit.aws_account_update_most_used_tags_job ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	aaumutj := AwsAccountUpdateMostUsedTagsJob{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&aaumutj.ID, &aaumutj.Created, &aaumutj.AwsAccountID, &aaumutj.Completed, &aaumutj.WorkerID, &aaumutj.JobError)
	if err != nil {
		return nil, err
	}

	return &aaumutj, nil
}

// AwsAccountUpdateMostUsedTagsJobsByAwsAccountID retrieves a row from 'trackit.aws_account_update_most_used_tags_job' as a AwsAccountUpdateMostUsedTagsJob.
//
// Generated from index 'foreign_aws_account'.
func AwsAccountUpdateMostUsedTagsJobsByAwsAccountID(db XODB, awsAccountID int) ([]*AwsAccountUpdateMostUsedTagsJob, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, created, aws_account_id, completed, worker_id, job_error ` +
		`FROM trackit.aws_account_update_most_used_tags_job ` +
		`WHERE aws_account_id = ?`

	// run query
	XOLog(sqlstr, awsAccountID)
	q, err := db.Query(sqlstr, awsAccountID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*AwsAccountUpdateMostUsedTagsJob{}
	for q.Next() {
		aaumutj := AwsAccountUpdateMostUsedTagsJob{
			_exists: true,
		}

		// scan
		err = q.Scan(&aaumutj.ID, &aaumutj.Created, &aaumutj.AwsAccountID, &aaumutj.Completed, &aaumutj.WorkerID, &aaumutj.JobError)
		if err != nil {
			return nil, err
		}

		res = append(res, &aaumutj)
	}

	return res, nil
}
